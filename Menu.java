/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Main;

import java.awt.GridLayout;
import java.awt.event.ActionListener;
import java.io.PrintWriter;
import javax.swing.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import java.sql.ResultSet;
import javax.swing.JComboBox;
import javax.swing.table.DefaultTableModel;
public class Menu extends javax.swing.JFrame {

    /**
     * Creates new form Menu
     */
    public Menu() {
        initComponents();
    }
private void loadPricesToDropdown(String category, JComboBox<String> dropdown) {
    dropdown.removeAllItems();
    dropdown.addItem("Please choose");
    dropdown.addItem("NONE");
    try {
        Connection connection = DatabaseConnection.getConnection();
        String sql = "SELECT Name FROM Prices WHERE Category = ?";
        PreparedStatement preparedStatement = connection.prepareStatement(sql);
        preparedStatement.setString(1, category);

        ResultSet resultSet = preparedStatement.executeQuery();
        while (resultSet.next()) {
            dropdown.addItem(resultSet.getString("Name"));
        }

        resultSet.close();
        preparedStatement.close();
        connection.close();
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error loading " + category + " data:\n" + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
    }
}

private double getPriceFromDatabase(String name, String category) {
    if ("NONE".equalsIgnoreCase(name) || "Please choose".equalsIgnoreCase(name)) {
        return 0.0; // No cost for NONE or unselected options
    }

    double price = 0.0;
    try {
        Connection connection = DatabaseConnection.getConnection();
        String sql = "SELECT Price FROM Prices WHERE Name = ? AND Category = ?";
        PreparedStatement preparedStatement = connection.prepareStatement(sql);
        preparedStatement.setString(1, name);
        preparedStatement.setString(2, category);

        ResultSet resultSet = preparedStatement.executeQuery();
        if (resultSet.next()) {
            price = resultSet.getDouble("Price");
        }

        resultSet.close();
        preparedStatement.close();
        connection.close();
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error fetching price:\n" + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
    }
    return price;
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        room = new javax.swing.JButton();
        res = new javax.swing.JButton();
        Bookings = new javax.swing.JButton();
        pools = new javax.swing.JButton();
        list = new javax.swing.JButton();
        acts = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(102, 255, 204));

        room.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Main/icons/door-lock.png"))); // NOI18N
        room.setText("ROOMS");
        room.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomActionPerformed(evt);
            }
        });

        res.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Main/icons/restaurant-building.png"))); // NOI18N
        res.setText("RESTAURANTS");
        res.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resActionPerformed(evt);
            }
        });

        Bookings.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Main/icons/payment-method.png"))); // NOI18N
        Bookings.setText("BILLING");
        Bookings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BookingsActionPerformed(evt);
            }
        });

        pools.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Main/icons/swimming-pool.png"))); // NOI18N
        pools.setText("POOL'S");
        pools.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                poolsActionPerformed(evt);
            }
        });

        list.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Main/icons/invoice.png"))); // NOI18N
        list.setText("LIST OF PRICE");
        list.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listActionPerformed(evt);
            }
        });

        acts.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Main/icons/team-building.png"))); // NOI18N
        acts.setText("ACTIVITIES");
        acts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actsActionPerformed(evt);
            }
        });

        jButton7.setBackground(new java.awt.Color(102, 0, 0));
        jButton7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton7.setForeground(new java.awt.Color(102, 255, 153));
        jButton7.setText("Back");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(0, 153, 153));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 255, 204));
        jLabel1.setText("RESORT FRONT DESK SYSTEM MENU'S");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 659, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(81, 81, 81))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(room, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(res, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 85, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pools, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(list, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(113, 113, 113)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(acts, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Bookings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(84, 84, 84))
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(68, 68, 68)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(room, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pools, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(acts, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(79, 79, 79)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(res, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(list, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Bookings, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 93, Short.MAX_VALUE)
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void roomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomActionPerformed
        Room room = new Room();
        room.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_roomActionPerformed

    private void resActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resActionPerformed
        Resto resto = new Resto();
        resto.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_resActionPerformed
// Receipt Frame
private void showReceiptFrame(String fullName, double total) {
    JFrame receiptFrame = new JFrame("Receipt");
    receiptFrame.setLayout(new GridLayout(5, 2));

    JTextField nameField = new JTextField(fullName);
    JTextField contactField = new JTextField();
    JTextField birthdateField = new JTextField();
    JComboBox<String> paymentDropdown = new JComboBox<>(new String[]{"Cash", "Credit Card", "GCash"});

    receiptFrame.add(new JLabel("Name:"));
    receiptFrame.add(nameField);
    receiptFrame.add(new JLabel("Contact:"));
    receiptFrame.add(contactField);
    receiptFrame.add(new JLabel("Birthdate:"));
    receiptFrame.add(birthdateField);
    receiptFrame.add(new JLabel("Payment Method:"));
    receiptFrame.add(paymentDropdown);

    JButton saveButton = new JButton("Save Receipt");
    receiptFrame.add(saveButton);

    saveButton.addActionListener(e -> {
        try {
            String contact = contactField.getText();
            String birthdate = birthdateField.getText();
            String paymentMethod = (String) paymentDropdown.getSelectedItem();

            if (contact.isEmpty() || birthdate.isEmpty()) {
                JOptionPane.showMessageDialog(receiptFrame, "Please fill all fields!", "Validation Error", JOptionPane.WARNING_MESSAGE);
                return;
            }

            String receiptContent = "Name: " + fullName + "\nContact: " + contact + "\nBirthdate: " + birthdate +
                    "\nPayment Method: " + paymentMethod + "\nTotal: ₱" + String.format("%.2f", total);

            try (PrintWriter writer = new PrintWriter("receipt.txt")) {
                writer.println(receiptContent);
            }

            JOptionPane.showMessageDialog(receiptFrame, "Receipt saved successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            receiptFrame.dispose();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(receiptFrame, "Error saving receipt:\n" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    });

    receiptFrame.setSize(400, 300);
    receiptFrame.setVisible(true);
}
    private void BookingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BookingsActionPerformed
    JTextField fullNameField = new JTextField();
    JTextField numPeopleField = new JTextField();
    JComboBox<String> roomDropdown = new JComboBox<>();
    JComboBox<String> poolDropdown = new JComboBox<>();
    JComboBox<String> activitiesDropdown = new JComboBox<>();
    JCheckBox parkingCheckbox = new JCheckBox("Parking (₱100)");
    JCheckBox cottageCheckbox = new JCheckBox("Cottage (₱350)");
    JLabel totalLabel = new JLabel("Total: ₱0.00");
    
    // Add Check-in and Check-out Date fields
    JTextField checkInDateField = new JTextField();  // Check-in date field
    JTextField checkOutDateField = new JTextField(); // Check-out date field

    // Load data from Prices table
    loadPricesToDropdown("Room", roomDropdown);
    loadPricesToDropdown("Pool", poolDropdown);
    loadPricesToDropdown("Activities", activitiesDropdown);

    // Panel for user input
    JPanel panel = new JPanel(new GridLayout(10, 2));
    panel.add(new JLabel("Full Name:"));
    panel.add(fullNameField);
    panel.add(new JLabel("Number of People:"));
    panel.add(numPeopleField);
    panel.add(new JLabel("Select Room:"));
    panel.add(roomDropdown);
    panel.add(new JLabel("Select Pool:"));
    panel.add(poolDropdown);
    panel.add(new JLabel("Select Activity:"));
    panel.add(activitiesDropdown);
    panel.add(parkingCheckbox);
    panel.add(cottageCheckbox);
    panel.add(totalLabel);
    
    // Add Check-in and Check-out fields to the panel
    panel.add(new JLabel("Check-in Date (YYYY-MM-DD):"));
    panel.add(checkInDateField);
    panel.add(new JLabel("Check-out Date (YYYY-MM-DD):"));
    panel.add(checkOutDateField);
    
    panel.add(totalLabel);

    // Listener to calculate total dynamically
    ActionListener updateTotalListener = e -> {
        double total = 0.0;

        String selectedRoom = (String) roomDropdown.getSelectedItem();
        String selectedPool = (String) poolDropdown.getSelectedItem();
        String selectedActivity = (String) activitiesDropdown.getSelectedItem();

        if (selectedRoom != null) total += getPriceFromDatabase(selectedRoom, "Room");
        if (selectedPool != null) total += getPriceFromDatabase(selectedPool, "Pool");
        if (selectedActivity != null) total += getPriceFromDatabase(selectedActivity, "Activities");

        if (parkingCheckbox.isSelected()) total += 100;
        if (cottageCheckbox.isSelected()) total += 350;

        totalLabel.setText("Total: ₱" + String.format("%.2f", total));
    };

    roomDropdown.addActionListener(updateTotalListener);
    poolDropdown.addActionListener(updateTotalListener);
    activitiesDropdown.addActionListener(updateTotalListener);
    parkingCheckbox.addActionListener(updateTotalListener);
    cottageCheckbox.addActionListener(updateTotalListener);

    // Show dialog
    int result = JOptionPane.showConfirmDialog(this, panel, "Book a Service", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

    if (result == JOptionPane.OK_OPTION) {
        String fullName = fullNameField.getText();
        String numPeopleText = numPeopleField.getText();
        String checkInDate = checkInDateField.getText();
        String checkOutDate = checkOutDateField.getText();

        if (fullName.isEmpty() || numPeopleText.isEmpty() || checkInDate.isEmpty() || checkOutDate.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in all required fields!", "Validation Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            int numPeople = Integer.parseInt(numPeopleText);
            String room = (String) roomDropdown.getSelectedItem();
            String pool = (String) poolDropdown.getSelectedItem();
            String activity = (String) activitiesDropdown.getSelectedItem();
            boolean parking = parkingCheckbox.isSelected();
            boolean cottage = cottageCheckbox.isSelected();
            double total = Double.parseDouble(totalLabel.getText().replace("Total: ₱", ""));
            
            // Show confirmation message before booking
            int confirmation = JOptionPane.showConfirmDialog(this, 
                "Confirm your booking:\n" +
                "Full Name: " + fullName + "\n" +
                "Number of People: " + numPeople + "\n" +
                "Room: " + room + "\n" +
                "Pool: " + pool + "\n" +
                "Activity: " + activity + "\n" +
                "Parking: " + (parking ? "Yes" : "No") + "\n" +
                "Cottage: " + (cottage ? "Yes" : "No") + "\n" +
                "Check-in Date: " + checkInDate + "\n" +
                "Check-out Date: " + checkOutDate + "\n" +
                "Total: ₱" + total, 
                "Booking Confirmation", 
                JOptionPane.OK_CANCEL_OPTION);

           // Save to database
                Connection connection = DatabaseConnection.getConnection();
                String sql = "INSERT INTO Billing (FullName, NumberOfPeople, Room, Pool, Activity, Parking, Cottage, CheckInDate, CheckOutDate, Total) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                PreparedStatement preparedStatement = connection.prepareStatement(sql);
                preparedStatement.setString(1, fullName);
                preparedStatement.setInt(2, numPeople);
                preparedStatement.setString(3, room);
                preparedStatement.setString(4, pool);
                preparedStatement.setString(5, activity);
                preparedStatement.setBoolean(6, parking);
                preparedStatement.setBoolean(7, cottage);
                preparedStatement.setString(8, checkInDate);
                preparedStatement.setString(9, checkOutDate);
                preparedStatement.setDouble(10, total);

            int rowsInserted = preparedStatement.executeUpdate();
            if (rowsInserted > 0) {
                JOptionPane.showMessageDialog(this, "Booking successful!", "Success", JOptionPane.INFORMATION_MESSAGE);

                // Show receipt frame
                showReceiptFrame(fullName, total);
            }

            preparedStatement.close();
            connection.close();
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Invalid number of people or price value!", "Validation Error", JOptionPane.WARNING_MESSAGE);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error saving booking:\n" + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    }//GEN-LAST:event_BookingsActionPerformed

    private void poolsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_poolsActionPerformed
        Pool pool = new Pool();
        pool.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_poolsActionPerformed

    private void listActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listActionPerformed
        Prices price = new Prices();
        price.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_listActionPerformed

    private void actsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actsActionPerformed
        Activities act = new Activities();
        act.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_actsActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        Main main = new Main();
        main.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton7ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Menu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Bookings;
    private javax.swing.JButton acts;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton list;
    private javax.swing.JButton pools;
    private javax.swing.JButton res;
    private javax.swing.JButton room;
    // End of variables declaration//GEN-END:variables
}
