/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Main;
import javax.swing.*;
import java.awt.*;
import javax.swing.table.*;
import java.sql.*;
import java.text.DecimalFormat;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Timer;
import java.util.TimerTask;
/**
 *
 * @author Ramsey
 */
public class Overview extends javax.swing.JFrame {
 
 private Timer refreshTimer;

    /**
     * Creates new form Overview
     */
    public Overview() {
        
        initComponents();
        updateOverviewTable();
        startAutoRefresh();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 102, 153));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Total Bookings", "Total Guest", "Total Income"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton1.setBackground(new java.awt.Color(204, 0, 0));
        jButton1.setText("BACK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(97, 97, 97)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 553, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(143, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(135, 135, 135)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(56, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
   private void updateOverviewTable() {
    try {
        // Establish database connection
        Connection connection = DatabaseConnection.getConnection();

        // Query to get total bookings from the Billing table
        String bookingsQuery = "SELECT COUNT(*) FROM Billing";
        PreparedStatement stmt = connection.prepareStatement(bookingsQuery);
        ResultSet bookingsResult = stmt.executeQuery();
        int totalBookings = 0;
        if (bookingsResult.next()) {
            totalBookings = bookingsResult.getInt(1);
        }

        // Query to get total guests
        String guestsQuery = "SELECT SUM(NumberOfPeople) FROM Billing";
        stmt = connection.prepareStatement(guestsQuery);
        ResultSet guestsResult = stmt.executeQuery();
        int totalGuests = 0;
        if (guestsResult.next()) {
            totalGuests = guestsResult.getInt(1);
        }

        // Query to get total income
        String incomeQuery = "SELECT SUM(Total) FROM Billing";
        stmt = connection.prepareStatement(incomeQuery);
        ResultSet incomeResult = stmt.executeQuery();
        double totalIncome = 0;
        if (incomeResult.next()) {
            totalIncome = incomeResult.getDouble(1);
        }

        // Debugging: Print retrieved data
        System.out.println("Total Bookings: " + totalBookings);
        System.out.println("Total Guests: " + totalGuests);
        System.out.println("Total Income: " + totalIncome);

        // Insert or update the overview table
        insertOrUpdateOverview(connection, totalBookings, totalGuests, totalIncome);

        // Update the table with the retrieved data
        updateTable(totalBookings, totalGuests, totalIncome);

        // Close resources
        stmt.close();
        connection.close();

    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error retrieving overview data:\n" + ex.getMessage(),
                "Database Error", JOptionPane.ERROR_MESSAGE);
    }
}

// Method to insert or update the overview table
private void insertOrUpdateOverview(Connection connection, int totalBookings, int totalGuests, double totalIncome) {
    try {
        // Query to check if there is already an entry in the overview table
        String checkQuery = "SELECT COUNT(*) FROM overview";
        PreparedStatement checkStmt = connection.prepareStatement(checkQuery);
        ResultSet checkResult = checkStmt.executeQuery();
        checkResult.next();
        int existingRecords = checkResult.getInt(1);

        if (existingRecords > 0) {
            // Update the existing record
            String updateQuery = "UPDATE overview SET TotalBookings = ?, TotalGuests = ?, TotalIncome = ? WHERE ID = 1";
            PreparedStatement updateStmt = connection.prepareStatement(updateQuery);
            updateStmt.setInt(1, totalBookings);
            updateStmt.setInt(2, totalGuests);
            updateStmt.setDouble(3, totalIncome);
            updateStmt.executeUpdate();
            updateStmt.close();
        } else {
            // Insert new record
            String insertQuery = "INSERT INTO overview (TotalBookings, TotalGuests, TotalIncome) VALUES (?, ?, ?)";
            PreparedStatement insertStmt = connection.prepareStatement(insertQuery);
            insertStmt.setInt(1, totalBookings);
            insertStmt.setInt(2, totalGuests);
            insertStmt.setDouble(3, totalIncome);
            insertStmt.executeUpdate();
            insertStmt.close();
        }

        checkStmt.close();
    } catch (SQLException e) {
        System.out.println("Error while inserting/updating overview table: " + e.getMessage());
    }
}

    // Method to update the table with the fetched data
    private void updateTable(int totalBookings, int totalGuests, double totalIncome) {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

        // Debugging: Check if the method is being called
        System.out.println("Updating table with the following data:");
        System.out.println("Total Bookings: " + totalBookings);
        System.out.println("Total Guests: " + totalGuests);
        System.out.println("Total Income: " + totalIncome);

        // Clear any existing rows in the table
        model.setRowCount(0);

        // Format the income as currency
        DecimalFormat df = new DecimalFormat("â‚±###,###.00");
        try {
            // Ensure that the income is formatted correctly
            String formattedIncome = df.format(totalIncome);

            // Add a new row to the table
            model.addRow(new Object[]{1, totalBookings, totalGuests, formattedIncome});
        } catch (Exception e) {
            System.out.println("Error formatting income: " + e.getMessage());
        }
    }

    private void startAutoRefresh() {
        // Refresh the data every 5 seconds (5000 milliseconds)
        refreshTimer = new Timer();
        refreshTimer.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
                // Debugging: Print statement for auto-refresh
                System.out.println("Refreshing overview...");
                
                // Update the table with the latest data
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        updateOverviewTable();
                    }
                });
            }
        }, 0, 5000);  // Run immediately and then every 5 seconds
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        Main main = new Main();
        main.setVisible(true);
        this.dispose();// TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Overview.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Overview.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Overview.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Overview.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Overview.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        // Create and display the form
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Overview().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
